
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\007\006\000\002\010\007\000\002" +
    "\017\006\000\002\017\005\000\002\011\003\000\002\011" +
    "\003\000\002\012\014\000\002\030\005\000\002\013\012" +
    "\000\002\014\011\000\002\016\004\000\002\015\005\000" +
    "\002\015\002\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\020\004\000\002\020\002" +
    "\000\002\022\006\000\002\023\006\000\002\024\007\000" +
    "\002\025\011\000\002\026\011\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\004\000\002\032\005\000\002\032\003" +
    "\000\002\032\005\000\002\032\004\000\002\032\005\000" +
    "\002\031\005\000\002\031\002\000\002\027\006\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\016\004\022\005\013\006\010\007\016\010" +
    "\012\011\ufffc\001\002\000\004\002\203\001\002\000\016" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\001" +
    "\002\000\032\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\022\ufff9\026\ufff9\041" +
    "\ufff9\001\002\000\032\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\022\ufffa\026" +
    "\ufffa\041\ufffa\001\002\000\004\042\173\001\002\000\016" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001" +
    "\002\000\004\041\164\001\002\000\004\042\161\001\002" +
    "\000\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\001\002\000\016\004\022\005\013\006\010\007\016" +
    "\010\012\011\ufffc\001\002\000\004\041\144\001\002\000" +
    "\016\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\001\002\000\004\011\027\001\002\000\032\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\022\ufffb\026\ufffb\041\ufffb\001\002\000\004\042" +
    "\023\001\002\000\004\041\024\001\002\000\004\024\025" +
    "\001\002\000\032\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\022\ufff8\026\ufff8" +
    "\041\ufff8\001\002\000\004\002\000\001\002\000\004\015" +
    "\030\001\002\000\006\016\uffeb\042\033\001\002\000\004" +
    "\016\037\001\002\000\004\023\035\001\002\000\004\041" +
    "\034\001\002\000\004\023\uffed\001\002\000\006\016\uffeb" +
    "\042\033\001\002\000\004\016\uffec\001\002\000\004\021" +
    "\040\001\002\000\022\004\022\005\013\006\010\013\044" +
    "\014\050\022\uffe2\026\054\041\042\001\002\000\024\004" +
    "\uffe9\005\uffe9\006\uffe9\012\uffe9\013\uffe9\014\uffe9\022\uffe9" +
    "\026\uffe9\041\uffe9\001\002\000\006\015\113\027\137\001" +
    "\002\000\024\004\uffe4\005\uffe4\006\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\022\uffe4\026\uffe4\041\uffe4\001\002\000\004\015" +
    "\131\001\002\000\024\004\uffe6\005\uffe6\006\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\022\uffe6\026\uffe6\041\uffe6\001\002\000" +
    "\024\004\022\005\013\006\010\012\uffe2\013\044\014\050" +
    "\022\uffe2\026\054\041\042\001\002\000\004\022\127\001" +
    "\002\000\004\015\121\001\002\000\024\004\uffe8\005\uffe8" +
    "\006\uffe8\012\uffe8\013\uffe8\014\uffe8\022\uffe8\026\uffe8\041" +
    "\uffe8\001\002\000\024\004\uffe5\005\uffe5\006\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\022\uffe5\026\uffe5\041\uffe5\001\002\000" +
    "\024\004\uffe7\005\uffe7\006\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\022\uffe7\026\uffe7\041\uffe7\001\002\000\004\015\056\001" +
    "\002\000\024\004\uffea\005\uffea\006\uffea\012\uffea\013\uffea" +
    "\014\uffea\022\uffea\026\uffea\041\uffea\001\002\000\020\015" +
    "\064\031\061\037\063\041\057\043\067\044\060\045\065" +
    "\001\002\000\034\015\113\016\uffdb\020\uffdb\023\uffdb\024" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\001\002\000\032\016\uffd5\020\uffd5\023" +
    "\uffd5\024\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\040\uffd5\001\002\000\020\015\064\031" +
    "\061\037\063\041\057\043\067\044\060\045\065\001\002" +
    "\000\024\016\110\030\076\031\077\032\102\033\100\034" +
    "\073\035\071\036\103\040\075\001\002\000\020\015\064" +
    "\031\061\037\063\041\057\043\067\044\060\045\065\001" +
    "\002\000\020\015\064\031\061\037\063\041\057\043\067" +
    "\044\060\045\065\001\002\000\032\016\uffdc\020\uffdc\023" +
    "\uffdc\024\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\040\uffdc\001\002\000\032\016\uffd9\020" +
    "\uffd9\023\uffd9\024\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\040\uffd9\001\002\000\032\016" +
    "\uffd8\020\uffd8\023\uffd8\024\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\001\002\000" +
    "\024\016\074\030\076\031\077\032\102\033\100\034\073" +
    "\035\071\036\103\040\075\001\002\000\020\015\uffc9\031" +
    "\uffc9\037\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002" +
    "\000\020\015\064\031\061\037\063\041\057\043\067\044" +
    "\060\045\065\001\002\000\020\015\uffca\031\uffca\037\uffca" +
    "\041\uffca\043\uffca\044\uffca\045\uffca\001\002\000\032\016" +
    "\uffda\020\uffda\023\uffda\024\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\001\002\000" +
    "\020\015\064\031\061\037\063\041\057\043\067\044\060" +
    "\045\065\001\002\000\020\015\uffce\031\uffce\037\uffce\041" +
    "\uffce\043\uffce\044\uffce\045\uffce\001\002\000\020\015\uffcd" +
    "\031\uffcd\037\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd\001" +
    "\002\000\020\015\uffcb\031\uffcb\037\uffcb\041\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\001\002\000\020\015\064\031\061\037" +
    "\063\041\057\043\067\044\060\045\065\001\002\000\020" +
    "\015\uffcc\031\uffcc\037\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\001\002\000\020\015\uffc8\031\uffc8\037\uffc8\041\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\001\002\000\032\016\uffd6\020" +
    "\uffd6\023\uffd6\024\uffd6\030\076\031\077\032\102\033\100" +
    "\034\073\035\071\036\103\040\075\001\002\000\032\016" +
    "\uffd4\020\uffd4\023\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\001\002\000" +
    "\032\016\uffd2\020\uffd2\023\uffd2\024\uffd2\030\076\031\077" +
    "\032\102\033\100\034\073\035\071\036\103\040\075\001" +
    "\002\000\032\016\uffd3\020\uffd3\023\uffd3\024\uffd3\030\076" +
    "\031\077\032\102\033\100\034\073\035\071\036\103\040" +
    "\075\001\002\000\004\024\111\001\002\000\024\004\uffdf" +
    "\005\uffdf\006\uffdf\012\uffdf\013\uffdf\014\uffdf\022\uffdf\026" +
    "\uffdf\041\uffdf\001\002\000\032\016\uffd7\020\uffd7\023\uffd7" +
    "\024\uffd7\030\uffd7\031\uffd7\032\102\033\100\034\073\035" +
    "\uffd7\036\uffd7\040\075\001\002\000\022\015\064\016\uffd0" +
    "\031\061\037\063\041\057\043\067\044\060\045\065\001" +
    "\002\000\024\023\117\030\076\031\077\032\102\033\100" +
    "\034\073\035\071\036\103\040\075\001\002\000\004\016" +
    "\116\001\002\000\054\004\uffcf\005\uffcf\006\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\041\uffcf\001\002\000\022\015" +
    "\064\016\uffd0\031\061\037\063\041\057\043\067\044\060" +
    "\045\065\001\002\000\004\016\uffd1\001\002\000\020\015" +
    "\064\031\061\037\063\041\057\043\067\044\060\045\065" +
    "\001\002\000\024\016\123\030\076\031\077\032\102\033" +
    "\100\034\073\035\071\036\103\040\075\001\002\000\004" +
    "\021\124\001\002\000\022\004\022\005\013\006\010\013" +
    "\044\014\050\022\uffe2\026\054\041\042\001\002\000\004" +
    "\022\126\001\002\000\024\004\uffdd\005\uffdd\006\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\022\uffdd\026\uffdd\041\uffdd\001\002" +
    "\000\004\002\uffee\001\002\000\006\012\uffe3\022\uffe3\001" +
    "\002\000\020\015\064\031\061\037\063\041\057\043\067" +
    "\044\060\045\065\001\002\000\024\016\133\030\076\031" +
    "\077\032\102\033\100\034\073\035\071\036\103\040\075" +
    "\001\002\000\004\021\134\001\002\000\022\004\022\005" +
    "\013\006\010\013\044\014\050\022\uffe2\026\054\041\042" +
    "\001\002\000\004\022\136\001\002\000\024\004\uffde\005" +
    "\uffde\006\uffde\012\uffde\013\uffde\014\uffde\022\uffde\026\uffde" +
    "\041\uffde\001\002\000\022\015\064\025\140\031\061\037" +
    "\063\041\057\043\067\044\060\045\065\001\002\000\004" +
    "\024\143\001\002\000\024\024\142\030\076\031\077\032" +
    "\102\033\100\034\073\035\071\036\103\040\075\001\002" +
    "\000\024\004\uffe1\005\uffe1\006\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\022\uffe1\026\uffe1\041\uffe1\001\002\000\024\004\uffe0" +
    "\005\uffe0\006\uffe0\012\uffe0\013\uffe0\014\uffe0\022\uffe0\026" +
    "\uffe0\041\uffe0\001\002\000\004\042\145\001\002\000\004" +
    "\015\146\001\002\000\006\016\uffeb\042\033\001\002\000" +
    "\004\016\150\001\002\000\004\021\151\001\002\000\022" +
    "\004\022\005\013\006\010\012\uffe2\013\044\014\050\026" +
    "\054\041\042\001\002\000\004\012\153\001\002\000\020" +
    "\015\064\031\061\037\063\041\057\043\067\044\060\045" +
    "\065\001\002\000\004\022\155\001\002\000\016\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000" +
    "\024\024\157\030\076\031\077\032\102\033\100\034\073" +
    "\035\071\036\103\040\075\001\002\000\004\022\ufff0\001" +
    "\002\000\004\011\ufffd\001\002\000\004\041\162\001\002" +
    "\000\004\024\163\001\002\000\032\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\022\ufff7\026\ufff7\041\ufff7\001\002\000\004\015\165\001" +
    "\002\000\006\016\uffeb\042\033\001\002\000\004\016\167" +
    "\001\002\000\004\021\170\001\002\000\022\004\022\005" +
    "\013\006\010\013\044\014\050\022\uffe2\026\054\041\042" +
    "\001\002\000\004\022\172\001\002\000\016\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\001\002\000\004" +
    "\041\174\001\002\000\004\017\176\001\002\000\004\024" +
    "\202\001\002\000\020\015\064\031\061\037\063\041\057" +
    "\043\067\044\060\045\065\001\002\000\024\020\200\030" +
    "\076\031\077\032\102\033\100\034\073\035\071\036\103" +
    "\040\075\001\002\000\006\017\176\024\ufff4\001\002\000" +
    "\004\024\ufff5\001\002\000\032\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\022" +
    "\ufff6\026\ufff6\041\ufff6\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\026\002\003\003\017\004\014\005\016\006" +
    "\020\007\006\010\005\011\004\012\010\013\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\157\004\014\005\016\006\020\007\006\010\005\011\004" +
    "\012\010\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\030" +
    "\016\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\035\016\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\054\006\020\007\006\010\005\020\046\021\045\022\040" +
    "\023\050\024\052\025\044\026\051\027\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\054\006\020\007" +
    "\006\010\005\020\127\021\045\022\040\023\050\024\052" +
    "\025\044\026\051\027\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\065\032\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\065\032\111\001\001\000\006\033\100\034" +
    "\071\001\001\000\006\027\065\032\106\001\001\000\006" +
    "\027\065\032\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\100\034\071\001\001" +
    "\000\002\001\001\000\006\027\065\032\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\065\032\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\065\032\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\100\034\071\001\001\000" +
    "\006\033\100\034\071\001\001\000\006\033\100\034\071" +
    "\001\001\000\006\033\100\034\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\100\034\071\001\001" +
    "\000\010\027\065\031\114\032\113\001\001\000\006\033" +
    "\100\034\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\065\031\117\032\113\001\001\000\002\001" +
    "\001\000\006\027\065\032\121\001\001\000\006\033\100" +
    "\034\071\001\001\000\002\001\001\000\032\005\054\006" +
    "\020\007\006\010\005\020\124\021\045\022\040\023\050" +
    "\024\052\025\044\026\051\027\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\065\032\131\001\001\000\006\033\100\034" +
    "\071\001\001\000\002\001\001\000\032\005\054\006\020" +
    "\007\006\010\005\020\134\021\045\022\040\023\050\024" +
    "\052\025\044\026\051\027\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\065\032\140\001\001\000" +
    "\002\001\001\000\006\033\100\034\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\146\016\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\054\006\020\007\006\010" +
    "\005\020\151\021\045\022\040\023\050\024\052\025\044" +
    "\026\051\027\042\001\001\000\004\030\153\001\001\000" +
    "\006\027\065\032\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\100\034\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\165\016" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\054\006\020\007\006\010\005\020\170\021\045\022" +
    "\040\023\050\024\052\025\044\026\051\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\174\001\001\000\002\001\001\000\006\027\065" +
    "\032\176\001\001\000\006\033\100\034\071\001\001\000" +
    "\004\017\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= DECL_LIST MAIN_DECL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL ::= CVA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL ::= SUBPRG_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_LIST ::= DECL DECL_LIST 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CVA_DECL ::= CONST_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CVA_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CVA_DECL ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CVA_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CVA_DECL ::= ARR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CVA_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONST_DECL ::= CONST TYPE IDENT EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONST_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAR_DECL ::= VAR TYPE IDENT EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARR_DECL ::= ARRAY TYPE IDENT ARR_DIM EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARR_DIM ::= L_BOX EXPR R_BOX ARR_DIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DIM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARR_DIM ::= L_BOX EXPR R_BOX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DIM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUBPRG_DECL ::= FUNC_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBPRG_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBPRG_DECL ::= PROC_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBPRG_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_DECL ::= FUNCTION IDENT TYPE L_PAR ARG_LIST R_PAR L_BRK STMT_LIST RETURN_STMT R_BRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURN_STMT ::= RETURN EXPR EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROC_DECL ::= PROCEDURE IDENT L_PAR ARG_LIST R_PAR L_BRK STMT_LIST R_BRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROC_DECL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN_DECL ::= MAIN L_PAR ARG_LIST R_PAR L_BRK STMT_LIST R_BRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_DECL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARG ::= TYPE IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARG_LIST ::= ARG COMMA ARG_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARG_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT ::= CVA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMT ::= ASGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT ::= GET_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= PRINT_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= LOOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= IF_STMT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT_LIST ::= STMT STMT_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASGN ::= IDENT EQUALS EXPR EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GET_STMT ::= IDENT EQUALS READ EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STMT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINT_STMT ::= PRINT L_PAR EXPR R_PAR EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LOOP ::= WHILE L_PAR EXPR R_PAR L_BRK STMT_LIST R_BRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_STMT ::= IF L_PAR EXPR R_PAR L_BRK STMT_LIST R_BRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPR ::= STRCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPR ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPR ::= L_PAR EXPR R_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPR ::= CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPR ::= INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= SUB EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= EXPR ARITH_OP EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= EXPR REL EXPR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RelationalOperatorType r = (RelationalOperatorType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR ::= NOT EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR ::= EXPR BIN_OP EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR_LIST ::= EXPR COMMA EXPR_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPR_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL ::= IDENT L_PAR EXPR_LIST R_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARITH_OP ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARITH_OP ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARITH_OP ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARITH_OP ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITH_OP ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BIN_OP ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BIN_OP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BIN_OP ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BIN_OP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

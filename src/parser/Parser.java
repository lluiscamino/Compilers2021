
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.List;
import parser.symbols.*;
import parser.symbols.statements.*;
import parser.symbols.expressions.*;
import parser.symbols.declarations.*;
import parser.symbols.types.*;
import parser.symbols.expressions.literals.*;
import parser.symbols.statements.assignment.*;
import parser.symbols.statements.conditional.*;
import parser.symbols.statements.io.*;
import parser.symbols.statements.loop.*;
import parser.symbols.declarations.cva.ArrayDeclaration;
import parser.symbols.declarations.cva.CVADeclaration;
import parser.symbols.declarations.cva.PrimitiveDeclaration;
import parser.symbols.declarations.subprogram.FunctionDeclaration;
import parser.symbols.declarations.subprogram.MainDeclaration;
import parser.symbols.declarations.subprogram.ProcedureDeclaration;
import parser.symbols.declarations.subprogram.SubprogramDeclaration;
import parser.symbols.expressions.arithmetic.ArithmeticOperation;
import parser.symbols.expressions.arithmetic.Negative;
import parser.symbols.expressions.binary.BinaryOperation;
import parser.symbols.expressions.binary.Not;
import parser.symbols.expressions.binary.Relational;
import parser.symbols.expressions.reference.ArrayIdentifierReference;
import parser.symbols.expressions.reference.IdentifierReference;
import parser.symbols.operators.ArithmeticOperator;
import parser.symbols.operators.BinaryOperator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\010\010\000\002\007\003\000\002\007\003\000\002" +
    "\015\003\000\002\015\004\000\002\021\005\000\002\021" +
    "\004\000\002\022\006\000\002\022\005\000\002\011\003" +
    "\000\002\011\003\000\002\012\014\000\002\033\005\000" +
    "\002\013\012\000\002\014\011\000\002\020\004\000\002" +
    "\017\004\000\002\017\002\000\002\016\005\000\002\016" +
    "\002\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\023\004\000\002\023\002\000\002" +
    "\025\006\000\002\025\007\000\002\026\006\000\002\027" +
    "\007\000\002\030\011\000\002\031\011\000\002\031\015" +
    "\000\002\036\003\000\002\036\003\000\002\036\004\000" +
    "\002\036\005\000\002\036\003\000\002\036\004\000\002" +
    "\036\005\000\002\036\005\000\002\036\004\000\002\036" +
    "\005\000\002\035\004\000\002\035\002\000\002\034\005" +
    "\000\002\034\002\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\040\004\000\002" +
    "\040\002\000\002\037\005\000\002\037\002\000\002\042" +
    "\005\000\002\032\006\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\014\004\021\005\012\007\016\010\010\011" +
    "\ufffc\001\002\000\004\002\235\001\002\000\014\004\ufffe" +
    "\005\ufffe\007\ufffe\010\ufffe\011\ufffe\001\002\000\030\004" +
    "\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\023\ufffa\027\ufffa\043\ufffa\001\002\000\014\004" +
    "\uffef\005\uffef\007\uffef\010\uffef\011\uffef\001\002\000\004" +
    "\043\226\001\002\000\030\004\ufffb\005\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\023\ufffb\027\ufffb" +
    "\043\ufffb\001\002\000\006\006\ufff6\042\ufff6\001\002\000" +
    "\014\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\001\002" +
    "\000\014\004\021\005\012\007\016\010\010\011\ufffc\001" +
    "\002\000\006\006\216\042\215\001\002\000\004\043\201" +
    "\001\002\000\014\004\uffff\005\uffff\007\uffff\010\uffff\011" +
    "\uffff\001\002\000\004\011\023\001\002\000\006\006\ufff7" +
    "\042\ufff7\001\002\000\004\002\000\001\002\000\004\016" +
    "\024\001\002\000\006\017\uffe7\042\027\001\002\000\004" +
    "\017\042\001\002\000\006\017\uffe5\024\037\001\002\000" +
    "\010\016\ufff5\020\033\043\ufff5\001\002\000\004\043\031" +
    "\001\002\000\006\017\uffe9\024\uffe9\001\002\000\006\016" +
    "\ufff4\043\ufff4\001\002\000\004\021\034\001\002\000\010" +
    "\016\ufff2\020\033\043\ufff2\001\002\000\006\016\ufff3\043" +
    "\ufff3\001\002\000\004\017\uffe8\001\002\000\004\042\027" +
    "\001\002\000\006\017\uffe5\024\037\001\002\000\004\017" +
    "\uffe6\001\002\000\004\022\043\001\002\000\020\004\021" +
    "\005\012\013\046\014\053\023\uffdc\027\056\043\045\001" +
    "\002\000\022\004\uffe3\005\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\023\uffe3\027\uffe3\043\uffe3\001\002\000\010\016\131\020" +
    "\132\030\171\001\002\000\004\016\162\001\002\000\004" +
    "\025\161\001\002\000\022\004\uffe0\005\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\023\uffe0\027\uffe0\043\uffe0\001\002\000\022" +
    "\004\021\005\012\012\uffdc\013\046\014\053\023\uffdc\027" +
    "\056\043\045\001\002\000\004\023\157\001\002\000\004" +
    "\016\145\001\002\000\022\004\uffdf\005\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\023\uffdf\027\uffdf\043\uffdf\001\002\000\022" +
    "\004\uffe1\005\uffe1\012\uffe1\013\uffe1\014\uffe1\023\uffe1\027" +
    "\uffe1\043\uffe1\001\002\000\004\016\061\001\002\000\022" +
    "\004\uffe2\005\uffe2\012\uffe2\013\uffe2\014\uffe2\023\uffe2\027" +
    "\uffe2\043\uffe2\001\002\000\022\004\uffe4\005\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\023\uffe4\027\uffe4\043\uffe4\001\002\000" +
    "\022\016\071\022\063\032\067\040\072\043\062\044\075" +
    "\045\065\046\064\001\002\000\036\016\131\017\uffd3\020" +
    "\132\021\uffd3\024\uffd3\025\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\001\002\000" +
    "\014\022\063\023\uffc1\044\075\045\065\046\064\001\002" +
    "\000\034\017\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\041\uffc4\001\002\000\034\017\uffc5\021\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\041\uffc5\001\002\000\032\017\uffd4\021" +
    "\uffd4\024\uffd4\025\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\041\uffd4\001\002\000\022\016" +
    "\071\022\063\032\067\040\072\043\062\044\075\045\065" +
    "\046\064\001\002\000\024\017\116\031\102\032\104\033" +
    "\107\034\105\035\101\036\077\037\110\041\103\001\002" +
    "\000\022\016\071\022\063\032\067\040\072\043\062\044" +
    "\075\045\065\046\064\001\002\000\022\016\071\022\063" +
    "\032\067\040\072\043\062\044\075\045\065\046\064\001" +
    "\002\000\034\017\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\041\uffc3\001\002\000\032\017\uffd0\021\uffd0\024\uffd0" +
    "\025\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\041\uffd0\001\002\000\034\017\uffc6\021\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\001\002\000\032" +
    "\017\uffcc\021\uffcc\024\uffcc\025\uffcc\031\102\032\104\033" +
    "\107\034\105\035\101\036\077\037\110\041\103\001\002" +
    "\000\022\016\uffb7\022\uffb7\032\uffb7\040\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\001\002\000\022\016\071\022\063" +
    "\032\067\040\072\043\062\044\075\045\065\046\064\001" +
    "\002\000\022\016\uffb8\022\uffb8\032\uffb8\040\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\001\002\000\022\016\uffbc\022" +
    "\uffbc\032\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\001\002\000\022\016\071\022\063\032\067\040\072\043" +
    "\062\044\075\045\065\046\064\001\002\000\022\016\uffbb" +
    "\022\uffbb\032\uffbb\040\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\001\002\000\022\016\uffb9\022\uffb9\032\uffb9\040\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000\022\016" +
    "\071\022\063\032\067\040\072\043\062\044\075\045\065" +
    "\046\064\001\002\000\022\016\uffba\022\uffba\032\uffba\040" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\001\002\000\022" +
    "\016\uffb6\022\uffb6\032\uffb6\040\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\001\002\000\032\017\uffce\021\uffce\024\uffce" +
    "\025\uffce\031\102\032\104\033\107\034\105\035\101\036" +
    "\077\037\110\041\103\001\002\000\032\017\uffcd\021\uffcd" +
    "\024\uffcd\025\uffcd\031\102\032\104\033\107\034\105\035" +
    "\101\036\uffcd\037\uffcd\041\uffcd\001\002\000\032\017\uffcb" +
    "\021\uffcb\024\uffcb\025\uffcb\031\102\032\104\033\107\034" +
    "\105\035\101\036\077\037\110\041\103\001\002\000\024" +
    "\017\115\031\102\032\104\033\107\034\105\035\101\036" +
    "\077\037\110\041\103\001\002\000\032\017\uffd1\021\uffd1" +
    "\024\uffd1\025\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\041\uffd1\001\002\000\004\025\117" +
    "\001\002\000\022\004\uffd8\005\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\023\uffd8\027\uffd8\043\uffd8\001\002\000\032\017\uffcf" +
    "\021\uffcf\024\uffcf\025\uffcf\031\uffcf\032\uffcf\033\107\034" +
    "\105\035\101\036\uffcf\037\uffcf\041\uffcf\001\002\000\004" +
    "\023\127\001\002\000\006\023\uffbf\024\123\001\002\000" +
    "\012\022\063\044\075\045\065\046\064\001\002\000\004" +
    "\023\uffc2\001\002\000\006\023\uffbf\024\123\001\002\000" +
    "\004\023\uffc0\001\002\000\034\017\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\041\uffbe\001\002\000\032\017\uffd2" +
    "\021\uffd2\024\uffd2\025\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\001\002\000\024" +
    "\016\071\017\uffc9\022\063\032\067\040\072\043\062\044" +
    "\075\045\065\046\064\001\002\000\022\016\071\022\063" +
    "\032\067\040\072\043\062\044\075\045\065\046\064\001" +
    "\002\000\024\021\134\031\102\032\104\033\107\034\105" +
    "\035\101\036\077\037\110\041\103\001\002\000\036\017" +
    "\ufff0\020\132\021\ufff0\024\ufff0\025\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041" +
    "\ufff0\001\002\000\034\017\ufff1\021\ufff1\024\ufff1\025\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\041\ufff1\001\002\000\026\017\uffc7\024\141" +
    "\031\102\032\104\033\107\034\105\035\101\036\077\037" +
    "\110\041\103\001\002\000\004\017\140\001\002\000\032" +
    "\017\uffbd\021\uffbd\024\uffbd\025\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\001\002" +
    "\000\022\016\071\022\063\032\067\040\072\043\062\044" +
    "\075\045\065\046\064\001\002\000\004\017\uffca\001\002" +
    "\000\026\017\uffc7\024\141\031\102\032\104\033\107\034" +
    "\105\035\101\036\077\037\110\041\103\001\002\000\004" +
    "\017\uffc8\001\002\000\022\016\071\022\063\032\067\040" +
    "\072\043\062\044\075\045\065\046\064\001\002\000\024" +
    "\017\147\031\102\032\104\033\107\034\105\035\101\036" +
    "\077\037\110\041\103\001\002\000\004\022\150\001\002" +
    "\000\020\004\021\005\012\013\046\014\053\023\uffdc\027" +
    "\056\043\045\001\002\000\004\023\152\001\002\000\024" +
    "\004\uffd6\005\uffd6\012\uffd6\013\uffd6\014\uffd6\015\153\023" +
    "\uffd6\027\uffd6\043\uffd6\001\002\000\004\022\154\001\002" +
    "\000\020\004\021\005\012\013\046\014\053\023\uffdc\027" +
    "\056\043\045\001\002\000\004\023\156\001\002\000\022" +
    "\004\uffd5\005\uffd5\012\uffd5\013\uffd5\014\uffd5\023\uffd5\027" +
    "\uffd5\043\uffd5\001\002\000\004\002\uffea\001\002\000\006" +
    "\012\uffdd\023\uffdd\001\002\000\022\004\uffde\005\uffde\012" +
    "\uffde\013\uffde\014\uffde\023\uffde\027\uffde\043\uffde\001\002" +
    "\000\022\016\071\022\063\032\067\040\072\043\062\044" +
    "\075\045\065\046\064\001\002\000\024\017\164\031\102" +
    "\032\104\033\107\034\105\035\101\036\077\037\110\041" +
    "\103\001\002\000\004\022\165\001\002\000\020\004\021" +
    "\005\012\013\046\014\053\023\uffdc\027\056\043\045\001" +
    "\002\000\004\023\167\001\002\000\022\004\uffd7\005\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\023\uffd7\027\uffd7\043\uffd7\001" +
    "\002\000\004\030\176\001\002\000\024\016\071\022\063" +
    "\026\172\032\067\040\072\043\062\044\075\045\065\046" +
    "\064\001\002\000\004\025\175\001\002\000\024\025\174" +
    "\031\102\032\104\033\107\034\105\035\101\036\077\037" +
    "\110\041\103\001\002\000\022\004\uffdb\005\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\023\uffdb\027\uffdb\043\uffdb\001\002\000" +
    "\022\004\uffd9\005\uffd9\012\uffd9\013\uffd9\014\uffd9\023\uffd9" +
    "\027\uffd9\043\uffd9\001\002\000\022\016\071\022\063\032" +
    "\067\040\072\043\062\044\075\045\065\046\064\001\002" +
    "\000\024\025\200\031\102\032\104\033\107\034\105\035" +
    "\101\036\077\037\110\041\103\001\002\000\022\004\uffda" +
    "\005\uffda\012\uffda\013\uffda\014\uffda\023\uffda\027\uffda\043" +
    "\uffda\001\002\000\004\042\027\001\002\000\004\016\203" +
    "\001\002\000\006\017\uffe7\042\027\001\002\000\004\017" +
    "\205\001\002\000\004\022\206\001\002\000\020\004\021" +
    "\005\012\012\uffdc\013\046\014\053\027\056\043\045\001" +
    "\002\000\004\012\210\001\002\000\022\016\071\022\063" +
    "\032\067\040\072\043\062\044\075\045\065\046\064\001" +
    "\002\000\004\023\212\001\002\000\014\004\uffed\005\uffed" +
    "\007\uffed\010\uffed\011\uffed\001\002\000\024\025\214\031" +
    "\102\032\104\033\107\034\105\035\101\036\077\037\110" +
    "\041\103\001\002\000\004\023\uffec\001\002\000\004\043" +
    "\223\001\002\000\004\042\217\001\002\000\004\020\033" +
    "\001\002\000\004\043\221\001\002\000\004\025\222\001" +
    "\002\000\030\004\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\023\ufff8\027\ufff8\043\ufff8\001" +
    "\002\000\004\025\224\001\002\000\030\004\ufff9\005\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\023" +
    "\ufff9\027\ufff9\043\ufff9\001\002\000\004\011\ufffd\001\002" +
    "\000\004\016\227\001\002\000\006\017\uffe7\042\027\001" +
    "\002\000\004\017\231\001\002\000\004\022\232\001\002" +
    "\000\020\004\021\005\012\013\046\014\053\023\uffdc\027" +
    "\056\043\045\001\002\000\004\023\234\001\002\000\014" +
    "\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\026\002\003\003\017\004\013\005\016\006" +
    "\010\007\014\010\005\011\004\012\006\013\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\224\004\013\005" +
    "\016\006\010\007\014\010\005\011\004\012\006\013\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\027\017\024\020" +
    "\025\001\001\000\002\001\001\000\004\016\035\001\001" +
    "\000\004\021\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\027\020\037\001\001\000\004\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\057\006\010\007" +
    "\014\010\005\023\051\024\050\025\043\026\056\027\054" +
    "\030\047\031\053\032\046\001\001\000\002\001\001\000" +
    "\004\022\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\057\006\010\007\014\010" +
    "\005\023\157\024\050\025\043\026\056\027\054\030\047" +
    "\031\053\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\073\036" +
    "\067\041\065\042\072\001\001\000\004\022\127\001\001" +
    "\000\010\040\120\041\121\042\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\032\073" +
    "\036\117\041\065\042\072\001\001\000\006\043\105\044" +
    "\077\001\001\000\012\032\073\036\113\041\065\042\072" +
    "\001\001\000\012\032\073\036\075\041\065\042\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\105\044\077\001\001\000\002\001\001\000" +
    "\012\032\073\036\112\041\065\042\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\032\073\036\111\041" +
    "\065\042\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\073\036\110\041\065\042\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\105\044\077" +
    "\001\001\000\006\043\105\044\077\001\001\000\006\043" +
    "\105\044\077\001\001\000\006\043\105\044\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\105\044\077\001\001\000\002\001\001\000\004" +
    "\037\123\001\001\000\006\041\124\042\072\001\001\000" +
    "\002\001\001\000\004\037\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\073\035" +
    "\136\036\135\041\065\042\072\001\001\000\012\032\073" +
    "\036\132\041\065\042\072\001\001\000\006\043\105\044" +
    "\077\001\001\000\004\022\134\001\001\000\002\001\001" +
    "\000\010\034\141\043\105\044\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\032\073\036\142\041\065" +
    "\042\072\001\001\000\002\001\001\000\010\034\143\043" +
    "\105\044\077\001\001\000\002\001\001\000\012\032\073" +
    "\036\145\041\065\042\072\001\001\000\006\043\105\044" +
    "\077\001\001\000\002\001\001\000\032\005\057\006\010" +
    "\007\014\010\005\023\150\024\050\025\043\026\056\027" +
    "\054\030\047\031\053\032\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\057\006" +
    "\010\007\014\010\005\023\154\024\050\025\043\026\056" +
    "\027\054\030\047\031\053\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\073\036\162\041\065\042" +
    "\072\001\001\000\006\043\105\044\077\001\001\000\002" +
    "\001\001\000\032\005\057\006\010\007\014\010\005\023" +
    "\165\024\050\025\043\026\056\027\054\030\047\031\053" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\073\036\172\041\065\042\072" +
    "\001\001\000\002\001\001\000\006\043\105\044\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\032\073" +
    "\036\176\041\065\042\072\001\001\000\006\043\105\044" +
    "\077\001\001\000\002\001\001\000\004\015\201\001\001" +
    "\000\002\001\001\000\010\015\027\017\203\020\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\057" +
    "\006\010\007\014\010\005\023\206\024\050\025\043\026" +
    "\056\027\054\030\047\031\053\032\046\001\001\000\004" +
    "\033\210\001\001\000\012\032\073\036\212\041\065\042" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\105\044\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\027\017\227\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\057\006\010\007\014" +
    "\010\005\023\232\024\050\025\043\026\056\027\054\030" +
    "\047\031\053\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= DECL_LIST MAIN_DECL 
            {
              Program RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Declaration> l = (SymbolList<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainDeclaration m = (MainDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(l, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL ::= CVA_DECL 
            {
              Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CVADeclaration d = (CVADeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL ::= SUBPRG_DECL 
            {
              Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SubprogramDeclaration d = (SubprogramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_LIST ::= DECL DECL_LIST 
            {
              SymbolList<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Declaration> l = (SymbolList<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(l, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL_LIST ::= 
            {
              SymbolList<Declaration> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CVA_DECL ::= PRIM_DECL 
            {
              CVADeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrimitiveDeclaration d = (PrimitiveDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CVA_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CVA_DECL ::= ARR_DECL 
            {
              CVADeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeclaration d = (ArrayDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CVA_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PRIM_DECL ::= DECL_MODE PRIM_TYPE IDENT EOL 
            {
              PrimitiveDeclaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DeclarationMode m = (DeclarationMode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrimitiveDeclaration(m, pt, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIM_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARR_DECL ::= DECL_MODE ARRAY PRIM_TYPE ARR_DIM IDENT EOL 
            {
              ArrayDeclaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DeclarationMode m = (DeclarationMode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrimitiveType p = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayDimensions d = (ArrayDimensions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclaration(m, p, d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_MODE ::= CONST 
            {
              DeclarationMode RESULT =null;
		 RESULT = DeclarationMode.getConstant(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_MODE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_MODE ::= VAR 
            {
              DeclarationMode RESULT =null;
		 RESULT = DeclarationMode.getVariable(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_MODE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= PRIM_TYPE 
            {
              Type RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(pt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= PRIM_TYPE ARR_DIM 
            {
              Type RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDimensions d = (ArrayDimensions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(pt, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARR_DIM ::= L_BOX R_BOX ARR_DIM 
            {
              ArrayDimensions RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDimensions d = (ArrayDimensions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.addNewDimension(); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DIM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARR_DIM ::= L_BOX R_BOX 
            {
              ArrayDimensions RESULT =null;
		 RESULT = new ArrayDimensions(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_DIM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARR_INDEX ::= L_BOX EXPR R_BOX ARR_INDEX 
            {
              ArrayIndexes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayIndexes l = (ArrayIndexes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addIndex(e); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_INDEX",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARR_INDEX ::= L_BOX EXPR R_BOX 
            {
              ArrayIndexes RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayIndexes(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_INDEX",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SUBPRG_DECL ::= FUNC_DECL 
            {
              SubprogramDeclaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDeclaration f = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBPRG_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SUBPRG_DECL ::= PROC_DECL 
            {
              SubprogramDeclaration RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDeclaration p = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBPRG_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_DECL ::= FUNCTION IDENT TYPE L_PAR ARG_LIST R_PAR L_BRK STMT_LIST RETURN_STMT R_BRK 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolList<Argument> al = (SymbolList<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolList<Statement> sl = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Return r = (Return)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(i, t, al, sl, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RETURN_STMT ::= RETURN EXPR EOL 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROC_DECL ::= PROCEDURE IDENT L_PAR ARG_LIST R_PAR L_BRK STMT_LIST R_BRK 
            {
              ProcedureDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolList<Argument> al = (SymbolList<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Statement> sl = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureDeclaration(i, al, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROC_DECL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN_DECL ::= MAIN L_PAR ARG_LIST R_PAR L_BRK STMT_LIST R_BRK 
            {
              MainDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolList<Argument> a = (SymbolList<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Statement> s = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MainDeclaration(a, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_DECL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARG ::= TYPE IDENT 
            {
              Argument RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Argument(t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARG_LIST ::= ARG ARG_TAIL 
            {
              SymbolList<Argument> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Argument> t = (SymbolList<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(t, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARG_LIST ::= 
            {
              SymbolList<Argument> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARG_TAIL ::= COMMA ARG ARG_TAIL 
            {
              SymbolList<Argument> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Argument> t = (SymbolList<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(t, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_TAIL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARG_TAIL ::= 
            {
              SymbolList<Argument> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG_TAIL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= CVA_DECL 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CVADeclaration d = (CVADeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CVADeclarationStatement(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT ::= ASGN 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= READ_STMT 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Read r = (Read)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STMT ::= PRINT_STMT 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STMT ::= LOOP 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Loop l = (Loop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STMT ::= IF_STMT 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STMT ::= CALL EOL 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStatement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STMT_LIST ::= STMT STMT_LIST 
            {
              SymbolList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Statement> l = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(l, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STMT_LIST ::= 
            {
              SymbolList<Statement> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASGN ::= IDENT EQUALS EXPR EOL 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASGN",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASGN ::= IDENT ARR_INDEX EQUALS EXPR EOL 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int arrinleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrinright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayIndexes arrin = (ArrayIndexes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAssignment(i, arrin, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASGN",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // READ_STMT ::= IDENT EQUALS READ EOL 
            {
              Read RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Read(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_STMT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRINT_STMT ::= PRINT L_PAR EXPR R_PAR EOL 
            {
              Print RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LOOP ::= WHILE L_PAR EXPR R_PAR L_BRK STMT_LIST R_BRK 
            {
              Loop RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Statement> l = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileLoop(c, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_STMT ::= IF L_PAR EXPR R_PAR L_BRK STMT_LIST R_BRK 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Statement> l = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(c, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_STMT ::= IF L_PAR EXPR R_PAR L_BRK STMT_LIST R_BRK ELSE L_BRK STMT_LIST R_BRK 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolList<Statement> l1 = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Statement> l2 = (SymbolList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfElse(c, l1, l2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierReference(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR ::= IDENT ARR_INDEX 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayIndexes ai = (ArrayIndexes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayIdentifierReference(i, ai); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR ::= L_PAR EXPR R_PAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Priority(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPR ::= CALL 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CallExpression(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPR ::= SUB EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negative(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= EXPR ARITH_OP EXPR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArithmeticOperator ao = (ArithmeticOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperation(e1, ao, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= EXPR REL EXPR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RelationalOperatorType r = (RelationalOperatorType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relational(e1, r, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= NOT EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= EXPR BIN_OP EXPR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOperator bo = (BinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, bo, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPR_LIST ::= EXPR EXPR_TAIL 
            {
              SymbolList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Expression> et = (SymbolList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(et, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPR_LIST ::= 
            {
              SymbolList<Expression> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_LIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPR_TAIL ::= COMMA EXPR EXPR_TAIL 
            {
              SymbolList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Expression> et = (SymbolList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(et, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_TAIL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPR_TAIL ::= 
            {
              SymbolList<Expression> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR_TAIL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIT ::= INT_LIT 
            {
              Literal RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIT ::= BOOL_LIT 
            {
              Literal RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LIT ::= STR_LIT 
            {
              Literal RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LIT ::= ARR_LIT 
            {
              Literal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayLiteral l = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LIT_LIST ::= LIT LIT_TAIL 
            {
              SymbolList<Literal> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Literal> lt = (SymbolList<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(lt, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT_LIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIT_LIST ::= 
            {
              SymbolList<Literal> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT_LIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LIT_TAIL ::= COMMA LIT LIT_TAIL 
            {
              SymbolList<Literal> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolList<Literal> lt = (SymbolList<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolList<>(lt, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT_TAIL",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIT_TAIL ::= 
            {
              SymbolList<Literal> RESULT =null;
		 RESULT = new SymbolList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT_TAIL",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARR_LIT ::= L_BRK LIT_LIST R_BRK 
            {
              ArrayLiteral RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Literal> ll = (SymbolList<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLiteral(ll); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARR_LIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CALL ::= IDENT L_PAR EXPR_LIST R_PAR 
            {
              Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolList<Expression> el = (SymbolList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Call(i, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARITH_OP ::= ADD 
            {
              ArithmeticOperator RESULT =null;
		 RESULT = ArithmeticOperator.getAdd(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITH_OP ::= SUB 
            {
              ArithmeticOperator RESULT =null;
		 RESULT = ArithmeticOperator.getSubstract(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITH_OP ::= MUL 
            {
              ArithmeticOperator RESULT =null;
		 RESULT = ArithmeticOperator.getMultiply(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITH_OP ::= DIV 
            {
              ArithmeticOperator RESULT =null;
		 RESULT = ArithmeticOperator.getDivide(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITH_OP ::= MOD 
            {
              ArithmeticOperator RESULT =null;
		 RESULT = ArithmeticOperator.getModulo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BIN_OP ::= AND 
            {
              BinaryOperator RESULT =null;
		 RESULT = BinaryOperator.getAnd(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BIN_OP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BIN_OP ::= OR 
            {
              BinaryOperator RESULT =null;
		 RESULT = BinaryOperator.getOr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BIN_OP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
